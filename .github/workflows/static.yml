name: Generate RSS Feed from Markdown and Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'posts/**'
      - 'config.json'
      - 'generateRss.js'
  workflow_dispatch:
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Install dependencies
      - name: Install dependencies
        run: |
          npm install marked front-matter xml2js

      # Run the script to generate the RSS feed (index.xml)
      - name: Generate RSS Feed
        run: |
          node generateRss.js

      # Check if index.xml was generated
      - name: Check if index.xml was generated
        run: |
          if [ -f xml/index.xml ]; then
            echo "index.xml generated"
          else
            echo "index.xml not found"
            exit 1
          fi

      # Commit and push RSS feed if there are changes
      - name: Commit and push RSS feed
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          # Stage changes
          git add xml/index.xml

          # Check if the index.xml file has been modified
          if ! git diff --cached --quiet; then
            git commit -m "Generate RSS feed (index.xml)"
            git push
          else
            echo "No changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    steps:

      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # Additional step to check for discrepancies and update the deployment if necessary
      - name: Check and update deployment
        run: |
          git fetch --all
          LOCAL_SHA=$(git rev-parse HEAD)
          REMOTE_SHA=$(git rev-parse origin/main)

          if [ "$LOCAL_SHA" != "$REMOTE_SHA" ]; then
            echo "Local repository is ahead. Deploying updates..."
            git push origin HEAD:main
          else
            echo "Local repository is up-to-date."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
